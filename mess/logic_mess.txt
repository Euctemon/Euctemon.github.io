<div class="definition">
An <b>alphabet</b> is any set \(\Sigma\) of with elements called letters. A <b>word</b> is a finite sequence of letters. The set of all words over an alphabet \(\Sigma\) is usually denoted by \(\Sigma^\star\). A <b>formal language</b> \(L\) over an alphabet \(\Sigma\) is any subset of \(\Sigma^\star\).
</div>

<p>
    This definition doesn't include any rules as how to build new words out of old ones. We might not be sure if that is even possible. Let's say we have an alphabet \(\Sigma = \{\cdot, -\}\). We can immidiately see that the sequence \((\cdot --\cdot -)\) belongs to \(\Sigma^*\). We can then take any subset of \(\Sigma^*\) such a \(\{\cdot \cdot, --\}\) to be a language \(L\). By definition the sequence \((\cdot \cdot --)\) belongs to \(\Sigma^\star\) but it is not a word in the language \(L\). On the other hand the set \(L_1 = \{\text{finite sequences of dots}\}\) is also a language over \(\Sigma\). We can make new words out of old ones by concatenating.
</p>

<p>
    We would like to have a way of specifying a language based on rules which would generate new words rather then enumerate the language. We cannot reasonably write down a language with infinitely many words. What we need is a <i>formal grammar</i>. One such formal grammar is called <i>context free grammar</i>.
</p>

<div class="definition">
    A <b>context free grammar</b> is a tuple \(G = (V,\Sigma, R, S)\) where
    <ul>
        <li> \(V\) is a finite set of <b>nonterminal</b> characters.</li>
        <li>\(\Sigma\) is a set of <b>terminals</b> which is the alphabet of a language generated by the grammar \(G\)</li>
        <li>\(R\) is a finite relation on \(V \times (V \cup \Sigma)^\star\)</li>
        <li>\(S\) is the starting symbol, must be an element of \(V\)</li>
    </ul>
</div>

<p>
    \(a \xRightarrow{\star} b c\)
</p>




---------------

<span class="popover">this
    <span>This language has one function symbol \(f\) and one relation symbol \(r\), where \(\Alpha(f) = 1\) and \(\Alpha(r) = 2\).</span>
</span>